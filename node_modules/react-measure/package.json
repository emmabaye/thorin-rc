{
  "_args": [
    [
      {
        "raw": "react-measure@^2.0.0",
        "scope": null,
        "escapedName": "react-measure",
        "name": "react-measure",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/seniorconsultant/Documents/Development/thorin-rc"
    ]
  ],
  "_from": "react-measure@>=2.0.0 <3.0.0",
  "_id": "react-measure@2.0.2",
  "_inCache": true,
  "_location": "/react-measure",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-measure-2.0.2.tgz_1496224197923_0.6049981650430709"
  },
  "_npmUser": {
    "name": "souporserious",
    "email": "travis@souporserious.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-measure@^2.0.0",
    "scope": null,
    "escapedName": "react-measure",
    "name": "react-measure",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-measure/-/react-measure-2.0.2.tgz",
  "_shasum": "072a9a5fafc01dfbadc1fa5fb09fc351037f636c",
  "_shrinkwrap": null,
  "_spec": "react-measure@^2.0.0",
  "_where": "/Users/seniorconsultant/Documents/Development/thorin-rc",
  "author": {
    "name": "Travis Arnold",
    "email": "travis@souporserious.com",
    "url": "http://souporserious.com"
  },
  "bugs": {
    "url": "https://github.com/souporserious/react-measure/issues"
  },
  "dependencies": {
    "get-node-dimensions": "^1.2.0",
    "prop-types": "^15.5.10",
    "resize-observer-polyfill": "^1.4.2"
  },
  "description": "Compute measurements of React components.",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.17.0",
    "babel-loader": "^6.2.5",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "^6.16.0",
    "babel-preset-react": "^6.16.0",
    "babel-preset-stage-0": "^6.16.0",
    "chokidar": "^1.6.1",
    "css-loader": "^0.25.0",
    "git-directory-deploy": "^1.5.1",
    "http-server": "^0.9.0",
    "node-libs-browser": "^1.0.0",
    "node-sass": "^3.2.0",
    "postcss-loader": "^0.13.0",
    "react": "15.3.2",
    "react-dom": "15.3.2",
    "react-motion": "^0.4.2",
    "sass-loader": "^4.0.2",
    "style-loader": "^0.13.1",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "072a9a5fafc01dfbadc1fa5fb09fc351037f636c",
    "tarball": "https://registry.npmjs.org/react-measure/-/react-measure-2.0.2.tgz"
  },
  "files": [
    "dist",
    "lib"
  ],
  "gitHead": "0bd9e00aca9136d937ec486cb07ec61bf079ee10",
  "homepage": "https://github.com/souporserious/react-measure",
  "keywords": [
    "react",
    "component",
    "measure",
    "measurements",
    "dimensions",
    "element-queries",
    "container-queries",
    "size"
  ],
  "license": "MIT",
  "main": "lib/react-measure.js",
  "maintainers": [
    {
      "name": "souporserious",
      "email": "travis@souporserious.com"
    }
  ],
  "name": "react-measure",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">0.13.0",
    "react-dom": ">0.13.0"
  },
  "readme": "## React Measure\n\n[![npm version](https://badge.fury.io/js/react-measure.svg)](https://badge.fury.io/js/react-measure)\n[![Dependency Status](https://david-dm.org/souporserious/react-measure.svg)](https://david-dm.org/souporserious/react-measure)\n\nCompute measurements of React components. Uses [resize-observer-polyfill](https://github.com/que-etc/resize-observer-polyfill) to detect changes of an element and return the new dimensions.\n\n## Install\n\n`yarn add react-measure`\n\n`npm install react-measure --save`\n\n```html\n<script src=\"https://unpkg.com/react-measure/dist/react-measure.js\"></script>\n(UMD library exposed as `Measure`)\n```\n\n## Measure Component\n\nWrap any child component and calculate its client rect.\n\n### Props\n\n#### `client`: PropTypes.bool\n\nAdds the following to `contentRect.client` returned in the child function.\n\n[clientTop](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop), [clientLeft](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft), [clientWidth](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth), and [clientHeight](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight).\n\n#### `offset`: PropTypes.bool\n\nAdds the following to `contentRect.offset` returned in the child function.\n\n[offsetTop](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop), [offsetLeft](https://developer.mozilla.org/en-US/docs/Web/API/Element/offsetLeft), [offsetWidth](https://developer.mozilla.org/en-US/docs/Web/API/Element/offsetWidth), and [offsetHeight](https://developer.mozilla.org/en-US/docs/Web/API/Element/offsetHeight).\n\n#### `scroll`: PropTypes.bool\n\nAdds the following to `contentRect.scroll` returned in the child function.\n\n[scrollTop](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop), [scrollLeft](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft), [scrollWidth](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth), and [scrollHeight](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight).\n\n#### `bounds`: PropTypes.bool\n\nUses [getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) to calculate the element rect and add it to `contentRect.bounds` returned in the child function.\n\n#### `margin`: PropTypes.bool\n\nUses [getComputedStyle](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle) to calculate margins and add it to `contentRect.margin` returned in the child function.\n\n#### `innerRef`: PropTypes.func\n\nUse this to access the internal component `ref`.\n\n#### `onResize`: PropTypes.func\n\nCallback invoked when either element width or height have changed.\n\n#### `children`: PropTypes.func\n\nChildren must be a function. Will receive the following object shape:\n\n- `measureRef`: must be passed down to your component's ref in order to obtain a proper node to measure\n\n- `measure`: use to programmatically measure your component, calls the internal `measure` method in `withContentRect`\n\n- `contentRect`: this will contain any of the following allowed rects from above: `client`, `offset`, `scroll`, `bounds`, or `margin`. It will also include `entry` from the `ResizeObserver` when available.\n\n### Example\n\n```javascript\nimport Measure from 'react-measure'\nimport classNames from 'classnames'\n\nclass ItemToMeasure extends Component {\n  state = {\n    dimensions: {\n      width: -1,\n      height: -1\n    }\n  }\n\n  render() {\n    const { width, height } = this.state.dimensions\n    const className = classNames(\n      (width < 400) && 'small-width-modifier'\n    )\n\n    return (\n      <Measure\n        bounds\n        onResize={(contentRect) => {\n          this.setState({ dimensions: contentRect.bounds })\n        }}\n      >\n        {({ measureRef }) =>\n          <div ref={measureRef} className={className}>\n            I can do cool things with my dimensions now :D\n\n            { (height > 250) &&\n              <div>Render responsive content based on the component size!</div>\n            }\n          </div>\n        }\n      </Measure>\n    )\n  }\n}\n```\n\n## withContentRect(types) HoC\n\nA higher-order component that provides dimensions to the wrapped component. Accepts `types`, which determines what measurements are returned, similar to above. Then returns a function to pass the component you want measured.\n\nPass an array or single value of either `client`, `offset`, `scroll`, `bounds`, or `margin` to calculate and receive those measurements as the prop `contentRect` in your wrapped component. You can also use the `measure` function passed down to programmatically measure your component if you need to. And finally, remember to pass down the `measureRef` to the component you want measured.\n\nPasses down the same props as the `Measure` child function above, `measureRef`, `measure`, and `contentRect`.\n\nFun fact, the `Measure` component is a thin wrapper around `withContentRect`. Just check [the source](https://github.com/souporserious/react-measure/blob/master/src/Measure.jsx). This means your wrapped component will accept the same props as `Measure` does ðŸ˜Š\n\n### Example\n\n```javascript\nimport { withContentRect } from 'react-measure'\n\nconst ItemToMeasure = withContentRect('bounds')(({ measureRef, measure, contentRect }) => (\n  <div ref={measureRef}>\n    Some content here\n    <pre>\n      {JSON.stringify(contentRect, null, 2)}\n    </pre>\n  </div>\n))\n```\n\n## Run Example\n\nclone repo\n\n`git clone git@github.com:souporserious/react-measure.git`\n\nmove into folder\n\n`cd ~/react-measure`\n\ninstall dependencies\n\n`npm install`\n\nrun dev mode\n\n`npm run dev`\n\nopen your browser and visit: `http://localhost:8080/`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/souporserious/react-measure.git"
  },
  "scripts": {
    "build": "npm run build:lib && NODE_ENV=production webpack --config webpack.prod.config.js",
    "build:lib": "babel src --out-dir lib",
    "deploy": "NODE_ENV=production TARGET=minify webpack && git-directory-deploy --directory example --branch gh-pages",
    "dev": "webpack-dev-server --inline --hot --progress --colors --host 0.0.0.0 --devtool eval",
    "postbuild": "NODE_ENV=production TARGET=minify webpack --config webpack.prod.config.js",
    "prebuild": "rm -rf dist && mkdir dist",
    "prepublish": "npm run build"
  },
  "version": "2.0.2"
}
