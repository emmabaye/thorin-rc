'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logs = undefined;

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var logs = exports.logs = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(yargs) {
    var args, apps, app, baseUrl, token, url, res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _utils.Log.args(yargs.argv);

            args = (0, _omit3.default)(yargs.argv, ['_', '$0']);

            if (args.app) {
              _context.next = 4;
              break;
            }

            return _context.abrupt('return', _utils.Log.default(helpMessage));

          case 4:
            apps = _utils.Config.get('global', 'launchdock.apps', []);
            app = (0, _filter3.default)(apps, function (a) {
              return a.name === args.app;
            })[0];


            if (!app) {
              _utils.Log.warn('\nApp deployment not found');
              process.exit(1);
            }

            baseUrl = process.env.LAUNCHDOCK_URL || _utils.Config.get('cli', 'launchdock.url');
            token = _utils.Config.get('global', 'launchdock.token');
            url = baseUrl + '/logs/' + app._id;


            _utils.Log.debug('[Launchdock API]: GET ' + url);

            _context.prev = 11;
            _context.next = 14;
            return (0, _nodeFetch2.default)(url, { headers: { 'meteor-login-token': token } });

          case 14:
            res = _context.sent;
            _context.t0 = process.stdout;
            _context.next = 18;
            return res.text();

          case 18:
            _context.t1 = _context.sent;

            _context.t0.write.call(_context.t0, _context.t1);

            _context.next = 26;
            break;

          case 22:
            _context.prev = 22;
            _context.t2 = _context['catch'](11);

            _utils.Log.error(_context.t2);
            process.exit(1);

          case 26:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[11, 22]]);
  }));

  return function logs(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var helpMessage = '\nUsage:\n\n  reaction logs --app <appName>\n  reaction logs -a <appName>\n';