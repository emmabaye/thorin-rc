'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.register = register;

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _utils = require('../utils');

var _add = require('./keys/add');

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function register(yargs) {
  var _this = this;

  _utils.Log.args(yargs.argv);

  _inquirer2.default.prompt([{
    type: 'input',
    name: 'inviteToken',
    message: 'Invite Token:',
    validate: function validate(val) {
      return !!val.length || 'An invite token is required!';
    }
  }, {
    type: 'input',
    name: 'name',
    message: 'Full name:',
    validate: function validate(val) {
      return !!val.length || 'Full name is required!';
    }
  }, {
    type: 'input',
    name: 'username',
    message: 'Username:',
    validate: function validate(val) {
      if (!val) {
        return 'Username is required!';
      }
      if (!val.match('^[a-zA-Z0-9_.-]*$')) {
        return 'Username may only contain letters, digits, "_", "-" and "."\n>> It also cannot start with "-" or end in "."';
      }
      return true;
    }
  }, {
    type: 'password',
    name: 'password',
    message: 'Password:',
    validate: function validate(val) {
      return val.length > 7 || 'Password must be at least 8 characters!';
    }
  }, {
    type: 'password',
    name: 'passwordAgain',
    message: 'Password again:',
    validate: function validate(val, previousAnswers) {
      return val === previousAnswers.password || 'Password does not match!';
    }
  }]).then(function (answers) {
    var inviteToken = answers.inviteToken,
        username = answers.username,
        password = answers.password,
        name = answers.name;


    var gql = new _utils.GraphQL();

    gql.register({ token: inviteToken, name: name, username: username, password: password }).then(function (res) {
      if (!!res.errors) {
        res.errors.forEach(function (err) {
          _utils.Log.error(err.message);
        });
        process.exit(1);
      }

      var _res$data$inviteAccep = res.data.inviteAccept,
          _id = _res$data$inviteAccep._id,
          email = _res$data$inviteAccep.email;


      gql.login({ username: username, password: password }).then(function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(result) {
          var _result$data$loginWit, token, tokenExpires, keyPair;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!!result.errors) {
                    result.errors.forEach(function (err) {
                      _utils.Log.error(err.message);
                    });
                    process.exit(1);
                  }

                  _result$data$loginWit = result.data.loginWithPassword, token = _result$data$loginWit.token, tokenExpires = _result$data$loginWit.tokenExpires;


                  _utils.Config.set('global', 'launchdock', { _id: _id, name: name, username: username, email: email, token: token, tokenExpires: tokenExpires });

                  keyPair = (0, _utils.generateKeyPair)({ email: email });
                  _context.next = 6;
                  return (0, _add2.default)({ publicKey: keyPair.publicKey, title: keyPair.title });

                case 6:

                  _utils.Log.success('\nLogged in as ' + username);

                case 7:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, _this);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }).catch(function (e) {
      return _utils.Log.error(e);
    });
  });
}