'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var _ref2, token, password, gql, result;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _inquirer2.default.prompt([{
              type: 'input',
              name: 'token',
              message: 'Please provide the token from the password reset email you received:',
              validate: function validate(val) {
                return !!val.length || 'A reset token is required!';
              }
            }, {
              type: 'password',
              name: 'password',
              message: 'New password:',
              validate: function validate(val) {
                return val.length > 7 || 'Password must be at least 8 characters!';
              }
            }, {
              type: 'password',
              name: 'passwordAgain',
              message: 'New password again:',
              validate: function validate(val, previousAnswers) {
                return val === previousAnswers.password || 'Password does not match!';
              }
            }]);

          case 2:
            _ref2 = _context.sent;
            token = _ref2.token;
            password = _ref2.password;
            gql = new _utils.GraphQL();
            _context.next = 8;
            return gql.resetPassword({ token: token, password: password });

          case 8:
            result = _context.sent;


            if (!!result.errors) {
              result.errors.forEach(function (err) {
                _utils.Log.error(err.message);
              });
              process.exit(1);
            }

            _utils.Log.success('\nPassword has successfully been reset!\n');

            return _context.abrupt('return', result);

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function resetPassword() {
    return _ref.apply(this, arguments);
  }

  return resetPassword;
}();