'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reject2 = require('lodash/reject');

var _reject3 = _interopRequireDefault(_reject2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

exports.default = appDelete;

var _child_process = require('child_process');

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function appDelete(_ref) {
  var _this = this;

  var name = _ref.name;

  var apps = _utils.Config.get('global', 'launchdock.apps', []);
  var app = (0, _filter3.default)(apps, function (a) {
    return a.name === name;
  })[0];

  if (!app) {
    _utils.Log.warn('\nApp deployment not found');
    process.exit(1);
  }

  (0, _child_process.exec)('git remote remove ' + app.group.namespace + '-' + name, { stdio: 'ignore' }, function (err) {
    if (err) {
      _utils.Log.debug('Error deleting git remote: ' + app.group.namespace + '-' + name);
    }
  });

  _inquirer2.default.prompt([{
    type: 'confirm',
    name: 'delete',
    message: '\nAre you sure? There\'s no going back!',
    default: false
  }]).then(function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(answers) {
      var gql, res;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!answers.delete) {
                _context.next = 8;
                break;
              }

              gql = new _utils.GraphQL();
              _context.next = 4;
              return gql.fetch('\n        mutation appDelete($_id: ID!) {\n          appDelete(_id: $_id) {\n            success\n          }\n        }\n      ', { _id: app._id });

            case 4:
              res = _context.sent;


              if (!!res.errors) {
                res.errors.forEach(function (err) {
                  _utils.Log.error('Failure deleting app deployment: ' + err.message);
                });
                process.exit(1);
              }

              _utils.Config.set('global', 'launchdock.apps', (0, _reject3.default)(apps, function (a) {
                return a.name === name;
              }));

              _utils.Log.success('\nApp deployment \'' + name + '\' successfully deleted.\n');

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
}