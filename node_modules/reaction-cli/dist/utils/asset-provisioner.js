'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var appRoot = _path2.default.resolve('.').split('.meteor')[0];
  cleanup(appRoot);

  var pluginsPath = _path2.default.join(appRoot, '/imports/plugins/');
  var corePlugins = pluginsPath + 'core/';
  var includedPlugins = pluginsPath + 'included/';
  var customPlugins = pluginsPath + 'custom/';

  var core = getAssetPaths(corePlugins);
  var included = getAssetPaths(includedPlugins);
  var custom = getAssetPaths(customPlugins);

  var assetDirs = [].concat(core, included, custom);
  copyAssets(appRoot, assetDirs);
};

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _fs = require('./fs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * getAssetPaths: Get pathnames of all asset directories from each plugin.
 * @param { String } baseDirPath - path to a plugins sub-directory (core/included/custom)
 * @returns { Array } - Array of objects that contains plugin name & absolutepath of plugins `/private` directory
 */
function getAssetPaths(baseDirPath) {
  var assetPaths = [];
  // get all plugin directories at provided base path
  var pluginDirs = (0, _fs.getDirectories)(baseDirPath);
  pluginDirs.forEach(function (plugin) {
    var assetDirectory = baseDirPath + plugin;
    if ((0, _fs.exists)(assetDirectory)) {
      assetPaths.push({ name: plugin, dir: assetDirectory });
    }
  });
  return assetPaths;
}

/**
 * copyAssets: Copy all asset files into application's /private & /public folders
 * @param { String } appRoot - application root path
 * @param { Array } assetDirs - Array of objects that contains plugin name & absolutepath of plugin's root directory
 * @returns { undefined }
 */
function copyAssets(appRoot, assetDirs) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = assetDirs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;
      var dir = _ref.dir,
          name = _ref.name;
      var _arr = ['private', 'public'];

      for (var _i = 0; _i < _arr.length; _i++) {
        var folder = _arr[_i];
        var sourceDir = dir + '/' + folder;
        var targetDir = _path2.default.join(appRoot, folder, 'plugins', name);
        if ((0, _fs.exists)(sourceDir)) {
          try {
            _fsExtra2.default.copySync(sourceDir, targetDir);
          } catch (error) {
            _logger2.default.error('Can\'t copy files from ' + sourceDir + ' to ' + targetDir + ': ' + error.message);
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

/**
 * cleanup: Removes all (possibly outdated) assets, before copying them from each plugin into
 * application wide /public and /private folders.
 * @param { String } appRoot - application root path
 * @returns { undefined }
 */
function cleanup(appRoot) {
  var _arr2 = ['private', 'public'];

  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
    var folder = _arr2[_i2];
    var files = appRoot + '/' + folder + '/plugins/!(README.md)';
    try {
      _rimraf2.default.sync(files);
    } catch (error) {
      _logger2.default.error('Can\'t delete files in ' + files + ': ' + error.message);
    }
  }
}