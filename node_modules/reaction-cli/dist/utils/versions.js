'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var versions = {};

  var osType = _os2.default.platform();

  if (osType === 'darwin') {
    var release = (0, _child_process.execSync)('sw_vers -productVersion').toString().replace(/\r?\n|\r/g, '');
    versions.os = 'macOS';
    versions.osVersion = release;
  } else if (osType === 'win32') {
    versions.os = 'Windows';
    versions.osVersion = _os2.default.release();
  } else {
    versions.os = osType;
    versions.osVersion = _os2.default.release();
  }

  // get Node version
  versions.node = process.version.substring(1);

  // get NPM version
  versions.npm = (0, _child_process.execSync)('npm -v').toString().replace(/\r?\n|\r/g, '');

  if ((0, _commandExists.sync)('meteor')) {
    // get Meteor's Node version
    versions.meteorNode = (0, _child_process.execSync)('meteor node -v').toString().replace(/\r?\n|\r|v/g, '');

    // get Meteor's NPM version
    versions.meteorNpm = (0, _child_process.execSync)('meteor npm -v').toString().replace(/\r?\n|\r/g, '');
  }

  // get Docker version
  if ((0, _commandExists.sync)('docker')) {
    var dockerVer = (0, _child_process.execSync)('docker -v').toString().replace(/Docker version /g, '');
    versions.docker = dockerVer ? dockerVer.substring(0, dockerVer.indexOf(',')) : null;
  }

  // get reaction-cli version
  versions.cli = require('../../package.json').version;

  // get Reaction version (if in a Reaction directory)
  try {
    var packageFile = _fsExtra2.default.readJSONSync('./package.json');

    if (packageFile.name === 'reaction') {
      versions.reaction = packageFile.version;

      // get Reaction git branch name
      var reactionBranch = (0, _child_process.execSync)('git rev-parse --abbrev-ref HEAD').toString().replace(/\r?\n|\r/g, '');
      versions.reactionBranch = reactionBranch.indexOf('fatal') === -1 ? reactionBranch : null;
    }
  } catch (e) {
    versions.reaction = null;
  }

  return versions;
};

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _child_process = require('child_process');

var _commandExists = require('command-exists');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }