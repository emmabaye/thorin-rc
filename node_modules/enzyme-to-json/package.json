{
  "_args": [
    [
      {
        "raw": "enzyme-to-json@^1.5.1",
        "scope": null,
        "escapedName": "enzyme-to-json",
        "name": "enzyme-to-json",
        "rawSpec": "^1.5.1",
        "spec": ">=1.5.1 <2.0.0",
        "type": "range"
      },
      "/Users/seniorconsultant/Documents/Development/thorin-rc"
    ]
  ],
  "_from": "enzyme-to-json@>=1.5.1 <2.0.0",
  "_id": "enzyme-to-json@1.6.0",
  "_inCache": true,
  "_location": "/enzyme-to-json",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/enzyme-to-json-1.6.0.tgz_1505473651916_0.3233111856970936"
  },
  "_npmUser": {
    "name": "adriantoine",
    "email": "adriantoine@gmail.com"
  },
  "_npmVersion": "5.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "enzyme-to-json@^1.5.1",
    "scope": null,
    "escapedName": "enzyme-to-json",
    "name": "enzyme-to-json",
    "rawSpec": "^1.5.1",
    "spec": ">=1.5.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/enzyme-to-json/-/enzyme-to-json-1.6.0.tgz",
  "_shasum": "9d9bba706e8b500c673b7a4fa9ff7ce57b8b9254",
  "_shrinkwrap": null,
  "_spec": "enzyme-to-json@^1.5.1",
  "_where": "/Users/seniorconsultant/Documents/Development/thorin-rc",
  "author": {
    "name": "Adrien Antoine",
    "email": "adriantoine@gmail.com",
    "url": "http://adriantoine.com"
  },
  "bugs": {
    "url": "https://github.com/adriantoine/enzyme-to-json/issues",
    "email": "adrien@tray.io"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "lodash.filter": "^4.6.0",
    "lodash.isnil": "^4.0.0",
    "lodash.isplainobject": "^4.0.6",
    "lodash.omitby": "^4.6.0",
    "lodash.range": "^3.2.0",
    "object-values": "^1.0.0",
    "object.entries": "^1.0.4"
  },
  "description": "convert enzyme wrapper to a format compatible with Jest snapshot",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-jest": "~21.0.2",
    "babel-plugin-syntax-export-extensions": "^6.13.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "codecov": "^2.3.0",
    "cz-conventional-changelog": "~2.0.0",
    "enzyme": "^2.9.1",
    "eslint": "^4.6.1",
    "eslint-config-prettier": "^2.4.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-config-standard-react": "^5.0.0",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.1.1",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-react": "^7.3.0",
    "eslint-plugin-standard": "^3.0.1",
    "jest": "~21.1.0",
    "lint-staged": "^4.1.3",
    "pre-commit": "~1.2.2",
    "prettier": "^1.7.0",
    "react": "^15.6.1",
    "react-bootstrap": "^0.31.3",
    "react-dom": "^15.6.1",
    "react-test-renderer": "^15.6.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-izMrbriQySEiWDUR0NeAyzCiRBncgDjfX5bt3xobkyUinEA79q8UuBNUfWFyjX2ahhP2G8k1GN4kG9NAUF405g==",
    "shasum": "9d9bba706e8b500c673b7a4fa9ff7ce57b8b9254",
    "tarball": "https://registry.npmjs.org/enzyme-to-json/-/enzyme-to-json-1.6.0.tgz"
  },
  "engines": {
    "node": ">=5.0.0"
  },
  "gitHead": "01b2ba7ac3090ab471c14edc35e4f53c71c2c185",
  "homepage": "https://github.com/adriantoine/enzyme-to-json#readme",
  "jest": {
    "testPathIgnorePatterns": [
      "<rootDir>/tests/serializer",
      "<rootDir>/node_modules/"
    ],
    "coveragePathIgnorePatterns": [
      "<rootDir>/tests"
    ]
  },
  "keywords": [
    "enzyme",
    "jest",
    "snapshot",
    "wrapper",
    "pretty-format",
    "cheerio",
    "convert",
    "testing",
    "unit",
    "test"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "prettier --write --single-quote --trailing-comma all --no-bracket-spacing",
      "git add"
    ]
  },
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "trayio",
      "email": "dev+npm@tray.io"
    },
    {
      "name": "adriantoine",
      "email": "adriantoine@gmail.com"
    }
  ],
  "name": "enzyme-to-json",
  "optionalDependencies": {},
  "peerDependencies": {
    "enzyme": "^2.7.1"
  },
  "pre-commit": "lint-staged",
  "readme": "# enzyme-to-json\n[![Build Status](https://img.shields.io/travis/adriantoine/enzyme-to-json.svg?branch=master&style=flat-square)](https://travis-ci.org/adriantoine/enzyme-to-json)\n[![codecov](https://img.shields.io/codecov/c/github/adriantoine/enzyme-to-json.svg?style=flat-square)](https://codecov.io/gh/adriantoine/enzyme-to-json)\n[![Dependency Status](https://img.shields.io/gemnasium/adriantoine/enzyme-to-json.svg?style=flat-square)](https://gemnasium.com/github.com/adriantoine/enzyme-to-json)\n\n[![npm Version](https://img.shields.io/npm/v/enzyme-to-json.svg?style=flat-square)](https://www.npmjs.com/package/enzyme-to-json)\n[![License](https://img.shields.io/npm/l/enzyme-to-json.svg?style=flat-square)](https://www.npmjs.com/package/enzyme-to-json)\n[![Downloads](https://img.shields.io/npm/dm/enzyme-to-json.svg?style=flat-square)](https://npm-stat.com/charts.html?package=enzyme-to-json)\n\nConvert [Enzyme](http://airbnb.io/enzyme/) wrappers to a format compatible with [Jest snapshot testing](https://facebook.github.io/jest/docs/tutorial-react.html#snapshot-testing).\n\n# Install\n```console\n$ npm install --save-dev enzyme-to-json\n```\n\n# Usage\n\n## Helper\n\n```js\nimport React, { Component } from 'react';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\n\nclass MyComponent extends Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { count: 1 };\n  }\n\n  handleClick() {\n    this.setState(({ count }) => ({ count: count + 1 }));\n  }\n\n  render() {\n    return (\n      <div className={this.props.className} onClick={this.handleClick}>\n        <span className=\"count\">{this.state.count}</span>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nit('renders correctly', () => {\n  const wrapper = shallow(\n    <MyComponent className=\"my-component\">\n      <strong>Hello World!</strong>\n    </MyComponent>\n  );\n\n  expect(toJson(wrapper)).toMatchSnapshot();\n});\n\n// generates:\n\nexports[`renders correctly 1`] = `\n<div\n  className=\"my-component\"\n  onClick={[Function]}\n>\n  <span\n    className=\"count\"\n  >\n    1\n  </span>\n  <strong>\n    Hello World!\n  </strong>\n</div>\n`;\n```\nIt becomes especially handy as you can use all [Enzyme](http://airbnb.io/enzyme/) features like `find` or `setState`:\n```js\nit('renders span after setState', () => {\n  const wrapper = shallow(\n    <MyComponent className=\"my-component\">\n      <strong>Hello World!</strong>\n    </MyComponent>\n  );\n\n  wrapper.setState({ count: 42 });\n  expect(toJson(wrapper.find('span'))).toMatchSnapshot();\n});\n\n// generates:\n\nexports[`renders span after setState 1`] = `\n<span\n  className=\"count\"\n>\n  42\n</span>\n`;\n```\nIt could be useful if you want more focused tests.\n\nThis library also supports [`mount`](https://github.com/airbnb/enzyme/blob/master/docs/api/mount.md) and [`render`](https://github.com/airbnb/enzyme/blob/master/docs/api/render.md) Enzyme wrappers:\n```js\nit('mounts my component', () => {\n  const wrapper = mount(\n    <MyComponent className=\"my-component\">\n      <strong>Hello World!</strong>\n    </MyComponent>\n  );\n\n  expect(toJson(wrapper)).toMatchSnapshot();\n});\n\nit('renders my component', () => {\n  const wrapper = render(\n    <MyComponent className=\"my-component\">\n      <strong>Hello World!</strong>\n    </MyComponent>\n  );\n\n  expect(toJson(wrapper)).toMatchSnapshot();\n});\n```\n\nYou can still use the `shallowToJson`, `mountToJson` and `renderToJson` wrappers from the earlier versions, importing them like this:\n```\nimport {shallowToJson, mountToJson, renderToJson} from 'enzyme-to-json';\n```\n\n## Serializer\n\nIf you are using [Jest v17.0.0 or higher](https://github.com/facebook/jest/blob/master/CHANGELOG.md#jest-1700), you can also use a Jest serializer.\n\nAdd this to your Jest configuration:\n\n```js\n\"snapshotSerializers\": [\"<rootDir>/node_modules/enzyme-to-json/serializer\"]\n```\n\nIf you use [Jest v18.0.0 or higher](https://github.com/facebook/jest/blob/master/CHANGELOG.md#jest-1800), you can use a shorthand:\n\n```js\n\"snapshotSerializers\": [\"enzyme-to-json/serializer\"]\n```\n\nIf you use [Jest v19.0.0 or higher](https://github.com/facebook/jest/blob/master/CHANGELOG.md#jest-1900), you can [add a snapshot serializer](http://facebook.github.io/jest/docs/expect.html#expectaddsnapshotserializerserializer) in individual test files instead of modifying Jest configuration:\n\n* to make the dependency explicit instead of implicit\n* to avoid limits to configuration that might cause you to eject from `create-react-app`\n\n```js\nimport serializer from 'enzyme-to-json/serializer';\n\nexpect.addSnapshotSerializer(serializer);\n```\n\nThen you can use all of the above without having to include or use the `toJson` function! For example:\n\n```js\nit('mounts my component', () => {\n  const wrapper = shallow(\n    <MyComponent className=\"my-component\">\n      <strong>Hello World!</strong>\n    </MyComponent>\n  );\n\n  expect(wrapper).toMatchSnapshot();\n});\n\nit('mounts my component', () => {\n  const wrapper = mount(\n    <MyComponent className=\"my-component\">\n      <strong>Hello World!</strong>\n    </MyComponent>\n  );\n\n  expect(wrapper).toMatchSnapshot();\n});\n\nit('renders my component', () => {\n  const wrapper = render(\n    <MyComponent className=\"my-component\">\n      <strong>Hello World!</strong>\n    </MyComponent>\n  );\n\n  expect(wrapper).toMatchSnapshot();\n});\n```\n\nThis is inspired by [jest-serializer-enzyme](https://github.com/rogeliog/jest-serializer-enzyme), I first [added a note](https://github.com/adriantoine/enzyme-to-json/commit/4b2ffc388aaaeb639961c29d271d02acbfe5df40) to `jest-serializer-enzyme` but I then realised that the output is different, so it is not retro compatible with `enzyme-to-json` because it's using Enzyme `debug` helper which doesn't put each prop on a separate line.\n\nFor example the output of the first example would be:\n\n```js\nexports[`renders correctly 1`] = `\n<div className=\"my-component\" onClick={[Function]}>\n<span className=\"count\">\n1\n</span>\n<strong>\nHello World!\n</strong>\n</div>\n`;\n```\n\ninstead of:\n\n```js\nexports[`renders correctly 1`] = `\n<div\n  className=\"my-component\"\n  onClick={[Function]}\n>\n  <span\n    className=\"count\"\n  >\n    1\n  </span>\n  <strong>\n    Hello World!\n  </strong>\n</div>\n`;\n```\n\nwhich is different from ours. So, if you want to move from `enzyme-to-json` to `jest-serializer-enzyme`, you would have to update all snapshots.\n\nThe output is a matter of preference, also `jest-serializer-enzyme` only supports the `shallow` wrapper for now, so if you're already using `enzyme-to-json`, it's a bit easier to use our serializer for now. Thanks to [@rogeliog](https://github.com/rogeliog) for bringing up the idea.\n\n# Focused tests with `find` method\n\nOne thing I really like about this library is the ability to use `find` and Enzyme selectors to have focused tests.\n\nFor example, with `react-test-renderer` (used in [Jest documentation](https://facebook.github.io/jest/docs/tutorial-react.html#snapshot-testing)), you would test a component like that:\n```js\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n\nconst MyComponent = props => (\n    <div className={`my-component ${props.className}`}>\n        <h3>Component Heading</h3>\n        <span>{props.children}</span>\n    </div>\n);\n\nit('renders a `strong` correctly', () => {\n    const wrapper = renderer.create(\n        <MyComponent className=\"strong-class\">\n            <strong>Hello World!</strong>\n        </MyComponent>\n    );\n\n    expect(wrapper).toMatchSnapshot();\n});\n\nit('renders a `span` correctly', () => {\n    const wrapper = renderer.create(\n        <MyComponent className=\"span-class\">\n            <span>Hello World!</span>\n        </MyComponent>\n    );\n\n    expect(wrapper).toMatchSnapshot();\n});\n```\nand so on, handling all test cases. The problem, is that when you decide to change `Component Heading` to `Component Title`, you will get a failing snapshot test for each test with a long output like that:\n```diff\n● renders a `strong` correctly\n\nReceived value does not match the stored snapshot 1.\n\n- Snapshot\n+ Received\n\n  <div\n    className=\"my-component strong-class\"\n  >\n    <h3>\n-     Component Heading\n+     Component Title\n    </h3>\n    <span>\n      <strong>\n        Hello World!\n      </strong>\n    </span>\n  </div>\n\n  at Object.<anonymous> (test/focused.test.js:22:21)\n  at process._tickCallback (internal/process/next_tick.js:103:7)\n\n● renders a `span` correctly\n\nReceived value does not match the stored snapshot 1.\n\n- Snapshot\n+ Received\n\n  <div\n    className=\"my-component span-class\"\n  >\n    <h3>\n-     Component Heading\n+     Component Title\n    </h3>\n    <span>\n      <span>\n        Hello World!\n      </span>\n    </span>\n  </div>\n\n  at Object.<anonymous> (test/focused.test.js:32:21)\n  at process._tickCallback (internal/process/next_tick.js:103:7)\n```\nand so on, you may have 10 or more snapshot tests for the same component to handle different test cases.\n\nWhen using Enzyme `find` helper, you can write your tests focusing on a specific part of the output, like that:\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\n\nconst MyComponent = props => (\n    <div className={`my-component ${props.className}`}>\n        <h3>Component Heading</h3>\n        <span>{props.children}</span>\n    </div>\n);\n\nit('renders the right title', () => {\n    const wrapper = shallow(\n        <MyComponent className=\"strong-class\"/>\n    );\n\n    expect(toJson(wrapper.find('h3'))).toMatchSnapshot();\n});\n\nit('renders a `strong` correctly', () => {\n    const wrapper = shallow(\n        <MyComponent className=\"strong-class\">\n            <strong>Hello World!</strong>\n        </MyComponent>\n    );\n\n    expect(toJson(wrapper.find('span').first())).toMatchSnapshot();\n});\n\nit('renders a `span` correctly', () => {\n    const wrapper = shallow(\n        <MyComponent className=\"span-class\">\n            <span>Hello World!</span>\n        </MyComponent>\n    );\n\n    expect(toJson(wrapper.find('span').first())).toMatchSnapshot();\n});\n```\nTesting that the component renders a `span` and a `strong` is in a different test from testing that the title is correct and they will only fail if the component doesn't render `span` or `strong` correctly. When the title changes, only the first snapshot test will fail:\n```diff\n● renders the right title\n\nReceived value does not match the stored snapshot 1.\n\n- Snapshot\n+ Received\n\n  <h3>\n-   Component Heading\n+   Component Title\n  </h3>\n\n  at Object.<anonymous> (test/focused.test.js:19:93)\n  at process._tickCallback (internal/process/next_tick.js:103:7)\n```\n\n# Focused tests for `mount` wrapper\n\nBecause an Enzyme `mount` wrapper has a hybrid render tree of React components and DOM elements, `mountToJson`, `toJson`, and the serializer return both types of nodes. However, you can focus on whichever nodes are more relevant as the expected result of a test.\n\n## `mountToDeepJson`\n\nGiven an enzyme `mount` wrapper, especially from selector traversal, return a test object rendered to **maximum** depth. It contains only DOM nodes, no React components.\n\n```js\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { mountToDeepJson } from 'enzyme-to-json';\n\ntest('table head has field labels and button element to add a row', () => {\n  const addRow = () => {}; // a realistic example would interact with DOM :)\n  const fields = [ … ];\n  const records = [ … ];\n  const wrapper = mount(<Table addRow={addRow} fields={fields} records={records} />);\n\n  expect(mountToDeepJson(wrapper.find('thead'))).toMatchSnapshot();\n});\n```\n\n## `mountToShallowJson`\n\nGiven an enzyme `mount` wrapper, especially from selector traversal, return a test object rendered to **minimum** depth. It might contain DOM nodes, but any children which are React components are leaves of the tree. For some tests, it might combine the benefits of the `mount` and `shallow` wrappers.\n\n```js\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport { mountToShallowJson } from 'enzyme-to-json';\n\ntest('table head has field labels and Button component to add a row', () => {\n  const addRow = () => {}; // a realistic example would interact with DOM :)\n  const fields = [ … ];\n  const records = [ … ];\n  const wrapper = mount(<Table addRow={addRow} fields={fields} records={records} />);\n\n  expect(mountToShallowJson(wrapper.find('thead'))).toMatchSnapshot();\n});\n```\n\n\n## Contributing\n\nSee [CONTRIBUTING.md](/CONTRIBUTING.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adriantoine/enzyme-to-json.git"
  },
  "scripts": {
    "build": "babel src -d build && babel src/serializer.js -o serializer.js",
    "format": "prettier src/**/*.js tests/core/**/*.js --write --single-quote --trailing-comma all --no-bracket-spacing",
    "lint": "eslint src tests/core",
    "lint-staged": "lint-staged",
    "prepublish": "npm run build",
    "test": "npm run lint && npm run test-core && npm run test-serializer",
    "test-core": "NODE_ENV=test jest --coverage",
    "test-serializer": "cd tests/serializer && rm -rf node_modules && npm install && npm test"
  },
  "version": "1.6.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=5.0.0"
      },
      "pkgid": "enzyme-to-json@1.6.0"
    }
  ]
}
